#include <stdio.h>
#include <stdlib.h>
/**
 * alloc_grid - this is a pointer that retruns a pointer to the main
 *
 * @width: a parameter to insert the number of Rows
 * @height: a parameter to insert the number of columns
 *
 *
 * question and requirments:
 *
 * Write a function that returns a pointer to a 2D array of integers.
 *
 *	Prototype: int **alloc_grid(int width, int height);
 *	Each element of the grid should be initialized to 0
 *	The function should return NULL on failure
 *	If width or height is 0 or negative, return NULL
 *
 * Explanation: since 2D array is interwined (nasted) we set a pointer that
 * points to the number of rows of the array. if 3X4 array, the pointer
 * will point to 3 other pointers. and the 3 pointers points to each row of
 * the array(that is like the 3 pointer points to a single array) that makes
 * our 2D array dynamically. that is why we use double pointers at first
 *
 * Return: my_matrix
 *
 */

int **alloc_grid(int width, int height)
{
	 int i, R, C;
	 
/*setting the condition if paramters are 0 or bellow*/
	 if (width || height <= 0)
		 return (NULL);

/*allocating memory for the pointer that the row pointers points to */
	int **my_matrix = malloc(sizeof(int *) * width);

/* allocating memory for each row (the emlemts in each row)of the 2d array */
		for (i = 0; i < width; i++)
		{
			my_matrix[i] = malloc(sizeof(int) * height);
		}

	/* if memory could not be allocated */
		if (my_matrix == NULL)
			return (NULL);

/*
 * intalizing each elemnts of the array to zero. all elments are pointed the
 * 3 pointers and they all point to my_matrix. So we can assign like
 * my_matrix[2] help us acsess the 3rd row and my_matrix[2][4] help us to
 * accsess the elemnt on the 3rd row and 4th columun of the 2D array
 */
	for (R = 0; R < width; R++)
	{
		for (C = 0; C < height; C++)
			my_matrix[R][C] = 0;

	}
	
/*Freeing the memory allocated to the three pointers (this has to be 1st)*/
	for (R = 0; R < width; R++)
	{
		free(my_matrix[R]);
	}
/* Freeing the double pointer 2nd (not to lose z 3 row pointers b4 got freed*/
	free(my_matrix);

	return (my_matrix);
}
